/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {

using System;
using System.Runtime.InteropServices;

public class Box2D {
  public static IntPtr new_ContactArray(int nelements) {
    IntPtr cPtr = Box2DPINVOKE.new_ContactArray(nelements);
    return cPtr;
  }

  public static void delete_ContactArray(IntPtr ary) {
    Box2DPINVOKE.delete_ContactArray(ary);
  }

  public static Contact ContactArray_getitem(IntPtr ary, int index) {
    Contact ret = new Contact(Box2DPINVOKE.ContactArray_getitem(ary, index), true);
    return ret;
  }

  public static void ContactArray_setitem(IntPtr ary, int index, Contact value) {
    Box2DPINVOKE.ContactArray_setitem(ary, index, Contact.getCPtr(value));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IntPtr b2Alloc(int size) {
    IntPtr cPtr = Box2DPINVOKE.b2Alloc(size);
    return cPtr;
  }

  public static void b2Free(IntPtr mem) {
    Box2DPINVOKE.b2Free(mem);
  }

  public static void b2Log(string arg0) {
    Box2DPINVOKE.b2Log(arg0);
  }

  public static bool b2IsValid(float x) {
    bool ret = Box2DPINVOKE.b2IsValid(x);
    return ret;
  }

  public static float b2InvSqrt(float x) {
    float ret = Box2DPINVOKE.b2InvSqrt(x);
    return ret;
  }

  public static Vec2 b2Vec2_zero {
    get { 
      IntPtr ptr = Box2DPINVOKE.b2Vec2_zero_get();
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public static Vec2 Plus(Vec2 a, Vec2 b) {
    Vec2 ret = Box2DPINVOKE.Plus__SWIG_0(ref a, ref b);
    return ret;
  }

  public static Vec2 Minus(Vec2 a, Vec2 b) {
    Vec2 ret = Box2DPINVOKE.Minus__SWIG_0(ref a, ref b);
    return ret;
  }

  public static Vec2 Multiply(float s, Vec2 a) {
    Vec2 ret = Box2DPINVOKE.Multiply__SWIG_0(s, ref a);
    return ret;
  }

  public static bool EqualEqual(Vec2 a, Vec2 b) {
    bool ret = Box2DPINVOKE.EqualEqual(ref a, ref b);
    return ret;
  }

  public static float b2DistanceSquared(Vec2 a, Vec2 b) {
    float ret = Box2DPINVOKE.b2DistanceSquared(ref a, ref b);
    return ret;
  }

  public static SWIGTYPE_p_b2Vec3 Multiply(float s, SWIGTYPE_p_b2Vec3 a) {
    SWIGTYPE_p_b2Vec3 ret = new SWIGTYPE_p_b2Vec3(Box2DPINVOKE.Multiply__SWIG_1(s, SWIGTYPE_p_b2Vec3.getCPtr(a)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_b2Vec3 Plus(SWIGTYPE_p_b2Vec3 a, SWIGTYPE_p_b2Vec3 b) {
    SWIGTYPE_p_b2Vec3 ret = new SWIGTYPE_p_b2Vec3(Box2DPINVOKE.Plus__SWIG_1(SWIGTYPE_p_b2Vec3.getCPtr(a), SWIGTYPE_p_b2Vec3.getCPtr(b)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_b2Vec3 Minus(SWIGTYPE_p_b2Vec3 a, SWIGTYPE_p_b2Vec3 b) {
    SWIGTYPE_p_b2Vec3 ret = new SWIGTYPE_p_b2Vec3(Box2DPINVOKE.Minus__SWIG_1(SWIGTYPE_p_b2Vec3.getCPtr(a), SWIGTYPE_p_b2Vec3.getCPtr(b)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_b2Mat22 Plus(SWIGTYPE_p_b2Mat22 A, SWIGTYPE_p_b2Mat22 B) {
    SWIGTYPE_p_b2Mat22 ret = new SWIGTYPE_p_b2Mat22(Box2DPINVOKE.Plus__SWIG_2(SWIGTYPE_p_b2Mat22.getCPtr(A), SWIGTYPE_p_b2Mat22.getCPtr(B)), true);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vec2 b2Min(Vec2 a, Vec2 b) {
    Vec2 ret = Box2DPINVOKE.b2Min(ref a, ref b);
    return ret;
  }

  public static Vec2 b2Max(Vec2 a, Vec2 b) {
    Vec2 ret = Box2DPINVOKE.b2Max(ref a, ref b);
    return ret;
  }

  public static Vec2 b2Clamp(Vec2 a, Vec2 low, Vec2 high) {
    Vec2 ret = Box2DPINVOKE.b2Clamp(ref a, ref low, ref high);
    return ret;
  }

  public static uint b2NextPowerOfTwo(uint x) {
    uint ret = Box2DPINVOKE.b2NextPowerOfTwo(x);
    return ret;
  }

  public static bool b2IsPowerOfTwo(uint x) {
    bool ret = Box2DPINVOKE.b2IsPowerOfTwo(x);
    return ret;
  }

  public static int b2_chunkSize {
    get {
      int ret = Box2DPINVOKE.b2_chunkSize_get();
      return ret;
    } 
  }

  public static int b2_maxBlockSize {
    get {
      int ret = Box2DPINVOKE.b2_maxBlockSize_get();
      return ret;
    } 
  }

  public static int b2_blockSizes {
    get {
      int ret = Box2DPINVOKE.b2_blockSizes_get();
      return ret;
    } 
  }

  public static int b2_chunkArrayIncrement {
    get {
      int ret = Box2DPINVOKE.b2_chunkArrayIncrement_get();
      return ret;
    } 
  }

  public static byte b2_nullFeature {
    get {
      byte ret = Box2DPINVOKE.b2_nullFeature_get();
      return ret;
    } 
  }

  public static void b2CollideCircles(Manifold manifold, CircleShape circleA, Transform xfA, CircleShape circleB, Transform xfB) {
    Box2DPINVOKE.b2CollideCircles(Manifold.getCPtr(manifold), CircleShape.getCPtr(circleA), Transform.getCPtr(xfA), CircleShape.getCPtr(circleB), Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollidePolygonAndCircle(Manifold manifold, PolygonShape polygonA, Transform xfA, CircleShape circleB, Transform xfB) {
    Box2DPINVOKE.b2CollidePolygonAndCircle(Manifold.getCPtr(manifold), PolygonShape.getCPtr(polygonA), Transform.getCPtr(xfA), CircleShape.getCPtr(circleB), Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollidePolygons(Manifold manifold, PolygonShape polygonA, Transform xfA, PolygonShape polygonB, Transform xfB) {
    Box2DPINVOKE.b2CollidePolygons(Manifold.getCPtr(manifold), PolygonShape.getCPtr(polygonA), Transform.getCPtr(xfA), PolygonShape.getCPtr(polygonB), Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollideEdgeAndCircle(Manifold manifold, EdgeShape polygonA, Transform xfA, CircleShape circleB, Transform xfB) {
    Box2DPINVOKE.b2CollideEdgeAndCircle(Manifold.getCPtr(manifold), EdgeShape.getCPtr(polygonA), Transform.getCPtr(xfA), CircleShape.getCPtr(circleB), Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void b2CollideEdgeAndPolygon(Manifold manifold, EdgeShape edgeA, Transform xfA, PolygonShape circleB, Transform xfB) {
    Box2DPINVOKE.b2CollideEdgeAndPolygon(Manifold.getCPtr(manifold), EdgeShape.getCPtr(edgeA), Transform.getCPtr(xfA), PolygonShape.getCPtr(circleB), Transform.getCPtr(xfB));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int b2_stackSize {
    get {
      int ret = Box2DPINVOKE.b2_stackSize_get();
      return ret;
    } 
  }

  public static int b2_maxStackEntries {
    get {
      int ret = Box2DPINVOKE.b2_maxStackEntries_get();
      return ret;
    } 
  }

  public static float b2MixFriction(float friction1, float friction2) {
    float ret = Box2DPINVOKE.b2MixFriction(friction1, friction2);
    return ret;
  }

  public static float b2MixRestitution(float restitution1, float restitution2) {
    float ret = Box2DPINVOKE.b2MixRestitution(restitution1, restitution2);
    return ret;
  }

  public static float b2_minPulleyLength {
    get {
      float ret = Box2DPINVOKE.b2_minPulleyLength_get();
      return ret;
    } 
  }

  public static readonly double b2_pi = Box2DPINVOKE.b2_pi_get();
  public static readonly int b2_maxManifoldPoints = Box2DPINVOKE.b2_maxManifoldPoints_get();
  public static readonly int b2_maxPolygonVertices = Box2DPINVOKE.b2_maxPolygonVertices_get();
  public static readonly double b2_aabbExtension = Box2DPINVOKE.b2_aabbExtension_get();
  public static readonly double b2_aabbMultiplier = Box2DPINVOKE.b2_aabbMultiplier_get();
  public static readonly double b2_linearSlop = Box2DPINVOKE.b2_linearSlop_get();
  public static readonly double b2_angularSlop = Box2DPINVOKE.b2_angularSlop_get();
  public static readonly double b2_polygonRadius = Box2DPINVOKE.b2_polygonRadius_get();
  public static readonly int b2_maxSubSteps = Box2DPINVOKE.b2_maxSubSteps_get();
  public static readonly int b2_maxTOIContacts = Box2DPINVOKE.b2_maxTOIContacts_get();
  public static readonly double b2_velocityThreshold = Box2DPINVOKE.b2_velocityThreshold_get();
  public static readonly double b2_maxLinearCorrection = Box2DPINVOKE.b2_maxLinearCorrection_get();
  public static readonly double b2_maxAngularCorrection = Box2DPINVOKE.b2_maxAngularCorrection_get();
  public static readonly double b2_maxTranslation = Box2DPINVOKE.b2_maxTranslation_get();
  public static readonly double b2_maxTranslationSquared = Box2DPINVOKE.b2_maxTranslationSquared_get();
  public static readonly double b2_maxRotation = Box2DPINVOKE.b2_maxRotation_get();
  public static readonly double b2_maxRotationSquared = Box2DPINVOKE.b2_maxRotationSquared_get();
  public static readonly double b2_baumgarte = Box2DPINVOKE.b2_baumgarte_get();
  public static readonly double b2_toiBaugarte = Box2DPINVOKE.b2_toiBaugarte_get();
  public static readonly double b2_timeToSleep = Box2DPINVOKE.b2_timeToSleep_get();
  public static readonly double b2_linearSleepTolerance = Box2DPINVOKE.b2_linearSleepTolerance_get();
  public static readonly double b2_angularSleepTolerance = Box2DPINVOKE.b2_angularSleepTolerance_get();
  public static readonly int b2_nullNode = Box2DPINVOKE.b2_nullNode_get();
}

}
