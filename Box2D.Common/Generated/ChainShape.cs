/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public partial class ChainShape : Shape {
  private HandleRef swigCPtr;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal ChainShape(IntPtr cPtr, bool cMemoryOwn) : base(Box2DPINVOKE.ChainShape_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ChainShape obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChainShape() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_ChainShape(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ChainShape() : this(Box2DPINVOKE.new_ChainShape(), true) {
  }

  public void SetPrevVertex(Vec2 prevVertex) {
    Box2DPINVOKE.ChainShape_SetPrevVertex(swigCPtr, ref prevVertex);
  }

  public void SetNextVertex(Vec2 nextVertex) {
    Box2DPINVOKE.ChainShape_SetNextVertex(swigCPtr, ref nextVertex);
  }

  public void GetChildEdge(EdgeShape edge, int index) {
    Box2DPINVOKE.ChainShape_GetChildEdge(swigCPtr, EdgeShape.getCPtr(edge), index);
  }

  public int Count {
    set {
      Box2DPINVOKE.ChainShape_Count_set(swigCPtr, value);
    } 
    get {
      int ret = Box2DPINVOKE.ChainShape_Count_get(swigCPtr);
      return ret;
    } 
  }

  public Vec2 PrevVertex {
    set {
      Box2DPINVOKE.ChainShape_PrevVertex_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.ChainShape_PrevVertex_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public Vec2 NextVertex {
    set {
      Box2DPINVOKE.ChainShape_NextVertex_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.ChainShape_NextVertex_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public bool HasPrevVertex {
    set {
      Box2DPINVOKE.ChainShape_HasPrevVertex_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.ChainShape_HasPrevVertex_get(swigCPtr);
      return ret;
    } 
  }

  public bool HasNextVertex {
    set {
      Box2DPINVOKE.ChainShape_HasNextVertex_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.ChainShape_HasNextVertex_get(swigCPtr);
      return ret;
    } 
  }

  private void NativeCreateLoop(float[] vertices, int numVertices) {
    Box2DPINVOKE.ChainShape_NativeCreateLoop(swigCPtr, vertices, numVertices);
  }

  private void NativeCreateChain(float[] vertices, int numVertices) {
    Box2DPINVOKE.ChainShape_NativeCreateChain(swigCPtr, vertices, numVertices);
  }

}

}
