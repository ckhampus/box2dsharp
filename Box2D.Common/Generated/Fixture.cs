/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public partial class Fixture : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal Fixture(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Fixture obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Fixture() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_Fixture(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  private  IntPtr  NativeGetShape() {
    IntPtr cPtr = Box2DPINVOKE.Fixture_NativeGetShape__SWIG_0(swigCPtr);
    return cPtr;
}

  public void Refilter() {
    Box2DPINVOKE.Fixture_Refilter(swigCPtr);
  }

  public bool TestPoint( Vec2  p) {
    bool ret = Box2DPINVOKE.Fixture_TestPoint(swigCPtr,  ref p );
    return ret;
  }

  public void GetMassData(MassData massData) {
    Box2DPINVOKE.Fixture_GetMassData(swigCPtr, MassData.getCPtr(massData));
  }

  public Filter FilterData {
    set {
      Box2DPINVOKE.Fixture_FilterData_set(swigCPtr, Filter.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.Fixture_FilterData_get(swigCPtr);
      Filter ret = (cPtr == IntPtr.Zero) ? null : new Filter(cPtr, true);
      return ret;
    } 
  }

  public Fixture Next {
    get {
      IntPtr cPtr = Box2DPINVOKE.Fixture_Next_get(swigCPtr);
      Fixture ret = (cPtr == IntPtr.Zero) ? null : new Fixture(cPtr, false);
      return ret;
    } 
  }

  public IntPtr UserData {
    set {
      Box2DPINVOKE.Fixture_UserData_set(swigCPtr, value);
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.Fixture_UserData_get(swigCPtr);
      return cPtr;
    }
  
  }

  public ShapeType Type {
    get {
      return (ShapeType)Box2DPINVOKE.Fixture_Type_get(swigCPtr);
    }

  }

  public float Restitution {
    set {
      Box2DPINVOKE.Fixture_Restitution_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Fixture_Restitution_get(swigCPtr);
      return ret;
    } 
  }

  public float Friction {
    set {
      Box2DPINVOKE.Fixture_Friction_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Fixture_Friction_get(swigCPtr);
      return ret;
    } 
  }

  public float Density {
    set {
      Box2DPINVOKE.Fixture_Density_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Fixture_Density_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsSensor {
    set {
      Box2DPINVOKE.Fixture_IsSensor_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.Fixture_IsSensor_get(swigCPtr);
      return ret;
    } 
  }

}

}
