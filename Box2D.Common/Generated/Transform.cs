/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public class Transform : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal Transform(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Transform obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Transform() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_Transform(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Transform() : this(Box2DPINVOKE.new_Transform__SWIG_0(), true) {
  }

  public Transform( Vec2  position,  Rot  rotation) : this(Box2DPINVOKE.new_Transform__SWIG_1( ref position ,  ref rotation ), true) {
  }

  public Vec2 Position {
    set {
      Box2DPINVOKE.Transform_Position_set(swigCPtr,  ref value );
    } 
        get { 
            IntPtr ptr = Box2DPINVOKE.Transform_Position_get(swigCPtr);
            Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
            return ret;
        }
    
  }

  public Rot Rotation {
    set {
      Box2DPINVOKE.Transform_Rotation_set(swigCPtr,  ref value );
    } 
        get { 
            IntPtr ptr = Box2DPINVOKE.Transform_Rotation_get(swigCPtr);
            Rot ret = (Rot)Marshal.PtrToStructure(ptr, typeof(Rot));
            return ret;
        }
    
  }

}

}
