/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public class WorldManifold : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal WorldManifold(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(WorldManifold obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~WorldManifold() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_WorldManifold(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public void Initialize(Manifold manifold, Transform xfA, float radiusA, Transform xfB, float radiusB) {
    Box2DPINVOKE.WorldManifold_Initialize(swigCPtr, Manifold.getCPtr(manifold), Transform.getCPtr(xfA), radiusA, Transform.getCPtr(xfB), radiusB);
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec2 normal {
    set {
      Box2DPINVOKE.WorldManifold_normal_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.WorldManifold_normal_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public IntPtr points {
    set {
      Box2DPINVOKE.WorldManifold_points_set(swigCPtr, value);
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.WorldManifold_points_get(swigCPtr);
      SWIGTYPE_p_b2Vec2 ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float separations {
    set {
      Box2DPINVOKE.WorldManifold_separations_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.WorldManifold_separations_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public WorldManifold() : this(Box2DPINVOKE.new_WorldManifold(), true) {
  }

}

}
