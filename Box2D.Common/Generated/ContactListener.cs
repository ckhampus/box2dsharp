/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public class ContactListener : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal ContactListener(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ContactListener obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ContactListener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_ContactListener(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void BeginContact(Contact contact) {
    if (SwigDerivedClassHasMethod("BeginContact", swigMethodTypes0)) Box2DPINVOKE.ContactListener_BeginContactSwigExplicitContactListener(swigCPtr, Contact.getCPtr(contact)); else Box2DPINVOKE.ContactListener_BeginContact(swigCPtr, Contact.getCPtr(contact));
  }

  public virtual void EndContact(Contact contact) {
    if (SwigDerivedClassHasMethod("EndContact", swigMethodTypes1)) Box2DPINVOKE.ContactListener_EndContactSwigExplicitContactListener(swigCPtr, Contact.getCPtr(contact)); else Box2DPINVOKE.ContactListener_EndContact(swigCPtr, Contact.getCPtr(contact));
  }

  public virtual void PreSolve(Contact contact, Manifold oldManifold) {
    if (SwigDerivedClassHasMethod("PreSolve", swigMethodTypes2)) Box2DPINVOKE.ContactListener_PreSolveSwigExplicitContactListener(swigCPtr, Contact.getCPtr(contact), Manifold.getCPtr(oldManifold)); else Box2DPINVOKE.ContactListener_PreSolve(swigCPtr, Contact.getCPtr(contact), Manifold.getCPtr(oldManifold));
  }

  public virtual void PostSolve(Contact contact, ContactImpulse impulse) {
    if (SwigDerivedClassHasMethod("PostSolve", swigMethodTypes3)) Box2DPINVOKE.ContactListener_PostSolveSwigExplicitContactListener(swigCPtr, Contact.getCPtr(contact), ContactImpulse.getCPtr(impulse)); else Box2DPINVOKE.ContactListener_PostSolve(swigCPtr, Contact.getCPtr(contact), ContactImpulse.getCPtr(impulse));
  }

  public ContactListener() : this(Box2DPINVOKE.new_ContactListener(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("BeginContact", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateContactListener_0(SwigDirectorBeginContact);
    if (SwigDerivedClassHasMethod("EndContact", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateContactListener_1(SwigDirectorEndContact);
    if (SwigDerivedClassHasMethod("PreSolve", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateContactListener_2(SwigDirectorPreSolve);
    if (SwigDerivedClassHasMethod("PostSolve", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateContactListener_3(SwigDirectorPostSolve);
    Box2DPINVOKE.ContactListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ContactListener));
    return hasDerivedMethod;
  }

  private void SwigDirectorBeginContact(IntPtr contact) {
    BeginContact((contact == IntPtr.Zero) ? null : new Contact(contact, false));
  }

  private void SwigDirectorEndContact(IntPtr contact) {
    EndContact((contact == IntPtr.Zero) ? null : new Contact(contact, false));
  }

  private void SwigDirectorPreSolve(IntPtr contact, IntPtr oldManifold) {
    PreSolve((contact == IntPtr.Zero) ? null : new Contact(contact, false), (oldManifold == IntPtr.Zero) ? null : new Manifold(oldManifold, false));
  }

  private void SwigDirectorPostSolve(IntPtr contact, IntPtr impulse) {
    PostSolve((contact == IntPtr.Zero) ? null : new Contact(contact, false), (impulse == IntPtr.Zero) ? null : new ContactImpulse(impulse, false));
  }

  public delegate void SwigDelegateContactListener_0(IntPtr contact);
  public delegate void SwigDelegateContactListener_1(IntPtr contact);
  public delegate void SwigDelegateContactListener_2(IntPtr contact, IntPtr oldManifold);
  public delegate void SwigDelegateContactListener_3(IntPtr contact, IntPtr impulse);

  private SwigDelegateContactListener_0 swigDelegate0;
  private SwigDelegateContactListener_1 swigDelegate1;
  private SwigDelegateContactListener_2 swigDelegate2;
  private SwigDelegateContactListener_3 swigDelegate3;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(Contact) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(Contact) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(Contact), typeof(Manifold) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(Contact), typeof(ContactImpulse) };
}

}
