/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public partial class Body : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal Body(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Body obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public World World { get; private set; }

  public List<Fixture> Fixtures { get; set; }

  public List<JointEdge> Joints { get; set; }

  internal Body(World world) : this(IntPtr.Zero, true)
  {
      World = world;
  }

  internal void Reset(IntPtr cPtr)
  {
    swigCPtr = new HandleRef(this, cPtr);
    UserData = IntPtr.Zero;
    foreach (var fixture in Fixtures)
    {
      World._freeFixtures.PutObject(fixture);
    }
    Fixtures.Clear();
    Joints.Clear();
  }

  public Fixture CreateFixture(FixtureDef def) {
    IntPtr fixturePtr = Box2DPINVOKE.Body_CreateFixture__SWIG_0(swigCPtr, ref def);
    Fixture fixture = World._freeFixtures.GetObject();
    fixture.Reset(this, fixturePtr);
    World._fixtures.Add(fixturePtr, fixture);
    Fixtures.Add(fixture);
    return fixture;
  }

  public Fixture CreateFixture(Shape shape, float density) {
    IntPtr fixturePtr = Box2DPINVOKE.Body_CreateFixture__SWIG_1(swigCPtr, Shape.getCPtr(shape), density);
    Fixture fixture = World._freeFixtures.GetObject();
    fixture.Reset(this, fixturePtr);
    World._fixtures.Add(fixturePtr, fixture);
    Fixtures.Add(fixture);
    return fixture;
  }

  public void DestroyFixture(Fixture fixture) {
    Box2DPINVOKE.Body_DestroyFixture(swigCPtr, Fixture.getCPtr(fixture));
    World._fixtures.Remove(fixture.Handle);
    Fixtures.Remove(fixture);
    World._freeFixtures.PutObject(fixture);
  }

  public void SetTransform(Vec2 position, float angle) {
    Box2DPINVOKE.Body_SetTransform(swigCPtr, ref position, angle);
  }

  public void ApplyForce(Vec2 force, Vec2 point, bool wake) {
    Box2DPINVOKE.Body_ApplyForce(swigCPtr, ref force, ref point, wake);
  }

  public void ApplyForceToCenter(Vec2 force, bool wake) {
    Box2DPINVOKE.Body_ApplyForceToCenter(swigCPtr, ref force, wake);
  }

  public void ApplyTorque(float torque, bool wake) {
    Box2DPINVOKE.Body_ApplyTorque(swigCPtr, torque, wake);
  }

  public void ApplyLinearImpulse(Vec2 impulse, Vec2 point, bool wake) {
    Box2DPINVOKE.Body_ApplyLinearImpulse(swigCPtr, ref impulse, ref point, wake);
  }

  public void ApplyAngularImpulse(float impulse, bool wake) {
    Box2DPINVOKE.Body_ApplyAngularImpulse(swigCPtr, impulse, wake);
  }

  public void GetMassData(MassData data) {
    Box2DPINVOKE.Body_GetMassData(swigCPtr, MassData.getCPtr(data));
  }

  public void SetMassData(MassData data) {
    Box2DPINVOKE.Body_SetMassData(swigCPtr, MassData.getCPtr(data));
  }

  public void ResetMassData() {
    Box2DPINVOKE.Body_ResetMassData(swigCPtr);
  }

  public Vec2 GetWorldPoint(Vec2 localPoint) {
    Vec2 ret = Box2DPINVOKE.Body_GetWorldPoint(swigCPtr, ref localPoint);
    return ret;
  }

  public Vec2 GetWorldVector(Vec2 localVector) {
    Vec2 ret = Box2DPINVOKE.Body_GetWorldVector(swigCPtr, ref localVector);
    return ret;
  }

  public Vec2 GetLocalPoint(Vec2 worldPoint) {
    Vec2 ret = Box2DPINVOKE.Body_GetLocalPoint(swigCPtr, ref worldPoint);
    return ret;
  }

  public Vec2 GetLocalVector(Vec2 worldVector) {
    Vec2 ret = Box2DPINVOKE.Body_GetLocalVector(swigCPtr, ref worldVector);
    return ret;
  }

  public Vec2 GetLinearVelocityFromWorldPoint(Vec2 worldPoint) {
    Vec2 ret = Box2DPINVOKE.Body_GetLinearVelocityFromWorldPoint(swigCPtr, ref worldPoint);
    return ret;
  }

  public Vec2 GetLinearVelocityFromLocalPoint(Vec2 localPoint) {
    Vec2 ret = Box2DPINVOKE.Body_GetLinearVelocityFromLocalPoint(swigCPtr, ref localPoint);
    return ret;
  }

  public Transform Transform {
    set {
      Box2DPINVOKE.Body_Transform_set(swigCPtr, Transform.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.Body_Transform_get(swigCPtr);
      Transform ret = (cPtr == IntPtr.Zero) ? null : new Transform(cPtr, false);
      return ret;
    } 
  }

  public Vec2 Position {
    set {
      Box2DPINVOKE.Body_Position_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.Body_Position_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public Vec2 WorldCenter {
    set {
      Box2DPINVOKE.Body_WorldCenter_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.Body_WorldCenter_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public Vec2 LocalCenter {
    set {
      Box2DPINVOKE.Body_LocalCenter_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.Body_LocalCenter_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public Vec2 LinearVelocity {
    set {
      Box2DPINVOKE.Body_LinearVelocity_set(swigCPtr, ref value);
    } 
    get { 
      IntPtr ptr = Box2DPINVOKE.Body_LinearVelocity_get(swigCPtr);
      Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
      return ret;
    }
  
  }

  public Body Next {
    get {
      IntPtr cPtr = Box2DPINVOKE.Body_Next_get(swigCPtr);
      Body ret = (cPtr == IntPtr.Zero) ? null : new Body(cPtr, false);
      return ret;
    } 
  }

  public BodyType Type {
    set {
      Box2DPINVOKE.Body_Type_set(swigCPtr, (int)value);
    } 
  get {
    return (BodyType)Box2DPINVOKE.Body_Type_get(swigCPtr);
  }

  }

  public IntPtr UserData {
    set {
      Box2DPINVOKE.Body_UserData_set(swigCPtr, value);
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.Body_UserData_get(swigCPtr);
      return cPtr;
    }
  
  }

  public float Angle {
    get {
      float ret = Box2DPINVOKE.Body_Angle_get(swigCPtr);
      return ret;
    } 
  }

  public float Mass {
    get {
      float ret = Box2DPINVOKE.Body_Mass_get(swigCPtr);
      return ret;
    } 
  }

  public float Inertia {
    get {
      float ret = Box2DPINVOKE.Body_Inertia_get(swigCPtr);
      return ret;
    } 
  }

  public float LinearDamping {
    set {
      Box2DPINVOKE.Body_LinearDamping_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Body_LinearDamping_get(swigCPtr);
      return ret;
    } 
  }

  public float AngularDamping {
    set {
      Box2DPINVOKE.Body_AngularDamping_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Body_AngularDamping_get(swigCPtr);
      return ret;
    } 
  }

  public float AngularVelocity {
    set {
      Box2DPINVOKE.Body_AngularVelocity_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Body_AngularVelocity_get(swigCPtr);
      return ret;
    } 
  }

  public float GravityScale {
    set {
      Box2DPINVOKE.Body_GravityScale_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Body_GravityScale_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsBullet {
    set {
      Box2DPINVOKE.Body_IsBullet_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.Body_IsBullet_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsSleepingAllowed {
    set {
      Box2DPINVOKE.Body_IsSleepingAllowed_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.Body_IsSleepingAllowed_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsAwake {
    set {
      Box2DPINVOKE.Body_IsAwake_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.Body_IsAwake_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsActive {
    set {
      Box2DPINVOKE.Body_IsActive_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.Body_IsActive_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsFixedRotation {
    set {
      Box2DPINVOKE.Body_IsFixedRotation_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.Body_IsFixedRotation_get(swigCPtr);
      return ret;
    } 
  }

}

}
