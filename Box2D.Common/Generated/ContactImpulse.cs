/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public class ContactImpulse : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal ContactImpulse(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ContactImpulse obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ContactImpulse() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_ContactImpulse(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_float normalImpulses {
    set {
      Box2DPINVOKE.ContactImpulse_normalImpulses_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.ContactImpulse_normalImpulses_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float tangentImpulses {
    set {
      Box2DPINVOKE.ContactImpulse_tangentImpulses_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Box2DPINVOKE.ContactImpulse_tangentImpulses_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public int count {
    set {
      Box2DPINVOKE.ContactImpulse_count_set(swigCPtr, value);
    } 
    get {
      int ret = Box2DPINVOKE.ContactImpulse_count_get(swigCPtr);
      return ret;
    } 
  }

  public void CreateLoop(float[] vertices, int numVertices) {
    Box2DPINVOKE.ContactImpulse_CreateLoop(swigCPtr, vertices, numVertices);
  }

  public void CreateChain(float[] vertices, int numVertices) {
    Box2DPINVOKE.ContactImpulse_CreateChain(swigCPtr, vertices, numVertices);
  }

  public ContactImpulse() : this(Box2DPINVOKE.new_ContactImpulse(), true) {
  }

}

}
