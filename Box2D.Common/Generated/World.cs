/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public partial class World : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ObjectPool<Body> _freeBodies;
  internal ObjectPool<Fixture> _freeFixtures;
  internal Dictionary<IntPtr, Body> _bodies;
  internal Dictionary<IntPtr, Fixture> _fixtures;
  internal Dictionary<IntPtr, Joint> _joints;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal World(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);

    _freeBodies = new ObjectPool<Body>(() => new Body(this));
  	_freeFixtures = new ObjectPool<Fixture>(() => new Fixture(IntPtr.Zero, true));
  	_bodies = new Dictionary<IntPtr, Body>();
  	_fixtures = new Dictionary<IntPtr, Fixture>();
  	_joints = new Dictionary<IntPtr, Joint>();

    ContactListener = new CustomContactListener(this);
  }

  internal static HandleRef getCPtr(World obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~World() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_World(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public World( Vec2  gravity) : this(Box2DPINVOKE.new_World( ref gravity ), true) {
  }

  public void SetDestructionListener(b2DestructionListener listener) {
    Box2DPINVOKE.World_SetDestructionListener(swigCPtr, b2DestructionListener.getCPtr(listener));
  }

  public void SetContactFilter(SWIGTYPE_p_b2ContactFilter filter) {
    Box2DPINVOKE.World_SetContactFilter(swigCPtr, SWIGTYPE_p_b2ContactFilter.getCPtr(filter));
  }

  private void SetContactListener(ContactListener listener) {
    Box2DPINVOKE.World_SetContactListener(swigCPtr, ContactListener.getCPtr(listener));
  }

  public void SetDebugDraw(SWIGTYPE_p_b2Draw debugDraw) {
    Box2DPINVOKE.World_SetDebugDraw(swigCPtr, SWIGTYPE_p_b2Draw.getCPtr(debugDraw));
  }

  private  IntPtr  NativeCreateBody( BodyDef  def) {
    IntPtr cPtr = Box2DPINVOKE.World_NativeCreateBody(swigCPtr,  ref def );
    return cPtr;
}

  private void NativeDestroyBody(Body body) {
    Box2DPINVOKE.World_NativeDestroyBody(swigCPtr, Body.getCPtr(body));
  }

  public Joint CreateJoint( JointDef  def) {
    IntPtr cPtr = Box2DPINVOKE.World_CreateJoint(swigCPtr,  ref def );
    Joint ret = (cPtr == IntPtr.Zero) ? null : new Joint(cPtr, false);
    return ret;
  }

  public void DestroyJoint(Joint joint) {
    Box2DPINVOKE.World_DestroyJoint(swigCPtr, Joint.getCPtr(joint));
  }

  public void Step(float timeStep, int velocityIterations, int positionIterations) {
    Box2DPINVOKE.World_Step(swigCPtr, timeStep, velocityIterations, positionIterations);
  }

  public void ClearForces() {
    Box2DPINVOKE.World_ClearForces(swigCPtr);
  }

  public void DrawDebugData() {
    Box2DPINVOKE.World_DrawDebugData(swigCPtr);
  }

  public void QueryAABB(SWIGTYPE_p_b2QueryCallback callback, SWIGTYPE_p_b2AABB aabb) {
    Box2DPINVOKE.World_QueryAABB(swigCPtr, SWIGTYPE_p_b2QueryCallback.getCPtr(callback), SWIGTYPE_p_b2AABB.getCPtr(aabb));
    if (Box2DPINVOKE.SWIGPendingException.Pending) throw Box2DPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RayCast(SWIGTYPE_p_b2RayCastCallback callback,  Vec2  point1,  Vec2  point2) {
    Box2DPINVOKE.World_RayCast(swigCPtr, SWIGTYPE_p_b2RayCastCallback.getCPtr(callback),  ref point1 ,  ref point2 );
  }

  public Body GetBodyList() {
    IntPtr cPtr = Box2DPINVOKE.World_GetBodyList__SWIG_0(swigCPtr);
    Body ret = (cPtr == IntPtr.Zero) ? null : new Body(cPtr, false);
    return ret;
  }

  public Joint GetJointList() {
    IntPtr cPtr = Box2DPINVOKE.World_GetJointList__SWIG_0(swigCPtr);
    Joint ret = (cPtr == IntPtr.Zero) ? null : new Joint(cPtr, false);
    return ret;
  }

  public Contact GetContactList() {
    IntPtr cPtr = Box2DPINVOKE.World_GetContactList__SWIG_0(swigCPtr);
    Contact ret = (cPtr == IntPtr.Zero) ? null : new Contact(cPtr, false);
    return ret;
  }

  public void ShiftOrigin( Vec2  newOrigin) {
    Box2DPINVOKE.World_ShiftOrigin(swigCPtr,  ref newOrigin );
  }

  public bool AllowSleeping {
    set {
      Box2DPINVOKE.World_AllowSleeping_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.World_AllowSleeping_get(swigCPtr);
      return ret;
    } 
  }

  public bool WarmStarting {
    set {
      Box2DPINVOKE.World_WarmStarting_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.World_WarmStarting_get(swigCPtr);
      return ret;
    } 
  }

  public bool ContinuousPhysics {
    set {
      Box2DPINVOKE.World_ContinuousPhysics_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.World_ContinuousPhysics_get(swigCPtr);
      return ret;
    } 
  }

  public bool SubStepping {
    set {
      Box2DPINVOKE.World_SubStepping_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.World_SubStepping_get(swigCPtr);
      return ret;
    } 
  }

  public int ProxyCount {
    get {
      int ret = Box2DPINVOKE.World_ProxyCount_get(swigCPtr);
      return ret;
    } 
  }

  public int BodyCount {
    get {
      int ret = Box2DPINVOKE.World_BodyCount_get(swigCPtr);
      return ret;
    } 
  }

  public int JointCount {
    get {
      int ret = Box2DPINVOKE.World_JointCount_get(swigCPtr);
      return ret;
    } 
  }

  public int ContactCount {
    get {
      int ret = Box2DPINVOKE.World_ContactCount_get(swigCPtr);
      return ret;
    } 
  }

  public int TreeHeight {
    get {
      int ret = Box2DPINVOKE.World_TreeHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int TreeBalance {
    get {
      int ret = Box2DPINVOKE.World_TreeBalance_get(swigCPtr);
      return ret;
    } 
  }

  public float TreeQuality {
    get {
      float ret = Box2DPINVOKE.World_TreeQuality_get(swigCPtr);
      return ret;
    } 
  }

  public Vec2 Gravity {
    set {
      Box2DPINVOKE.World_Gravity_set(swigCPtr,  ref value );
    } 
        get { 
            IntPtr ptr = Box2DPINVOKE.World_Gravity_get(swigCPtr);
            Vec2 ret = (Vec2)Marshal.PtrToStructure(ptr, typeof(Vec2));
            return ret;
        }
    
  }

  public bool IsLocked {
    get {
      bool ret = Box2DPINVOKE.World_IsLocked_get(swigCPtr);
      return ret;
    } 
  }

  public bool AutoClearForces {
    set {
      Box2DPINVOKE.World_AutoClearForces_set(swigCPtr, value);
    } 
    get {
      bool ret = Box2DPINVOKE.World_AutoClearForces_get(swigCPtr);
      return ret;
    } 
  }

}

}
