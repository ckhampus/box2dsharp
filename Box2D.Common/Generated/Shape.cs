/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Box2D {
 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

public partial class Shape : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntPtr Handle { get { return swigCPtr.Handle; } }

  internal Shape(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Shape obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Shape() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Box2DPINVOKE.delete_Shape(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ShapeType Type {
    set {
      Box2DPINVOKE.Shape_Type_set(swigCPtr, (int)value);
    } 
    get {
      return (ShapeType)Box2DPINVOKE.Shape_Type_get(swigCPtr);
    }

  }

  public float Radius {
    set {
      Box2DPINVOKE.Shape_Radius_set(swigCPtr, value);
    } 
    get {
      float ret = Box2DPINVOKE.Shape_Radius_get(swigCPtr);
      return ret;
    } 
  }

  public int ChildCount {
    get {
      int ret = Box2DPINVOKE.Shape_ChildCount_get(swigCPtr);
      return ret;
    } 
  }

  public Shape() : this(Box2DPINVOKE.new_Shape(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    Box2DPINVOKE.Shape_director_connect(swigCPtr);
  }
}

}
