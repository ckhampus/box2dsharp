/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Box2D(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Box2D(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Box2D(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <stdio.h>


#include <Box2D/Box2D.h>


static b2Contact *new_ContactArray(int nelements) { 
  return new b2Contact[nelements]; 
}

static void delete_ContactArray(b2Contact *ary) { 
  delete [] ary; 
}

static b2Contact ContactArray_getitem(b2Contact *ary, int index) {
    return ary[index];
}
static void ContactArray_setitem(b2Contact *ary, int index, b2Contact value) {
    ary[index] = value;
}


#define b2Body_Transform_get(self_) self_->GetTransform()
#define b2Body_Transform_set(self_, val_) self_->GetTransform() = val_
  

#define b2Body_Position_get(self_) self_->GetPosition()
#define b2Body_Position_set(self_, val_) self_->GetPosition() = val_
  

#define b2Body_WorldCenter_get(self_) self_->GetWorldCenter()
#define b2Body_WorldCenter_set(self_, val_) self_->GetWorldCenter() = val_
  

#define b2Body_LocalCenter_get(self_) self_->GetLocalCenter()
#define b2Body_LocalCenter_set(self_, val_) self_->GetLocalCenter() = val_
  

#define b2Body_LinearVelocity_get(self_) new b2Vec2(self_->GetLinearVelocity())
  

#define b2Body_LinearVelocity_set(self_, val_) self_->SetLinearVelocity(*val_)
    

#define b2Body_Next_get(self_) self_->GetNext()
  

#define b2Body_Type_get(self_) self_->GetType()
#define b2Body_Type_set(self_, val_) self_->SetType(val_)
  

#define b2Body_UserData_get(self_) self_->GetUserData()
#define b2Body_UserData_set(self_, val_) self_->SetUserData(val_)
  

#define b2Body_Angle_get(self_) self_->GetAngle()
  

#define b2Body_Mass_get(self_) self_->GetMass()
  

#define b2Body_Inertia_get(self_) self_->GetInertia()
  

#define b2Body_LinearDamping_get(self_) self_->GetLinearDamping()
#define b2Body_LinearDamping_set(self_, val_) self_->SetLinearDamping(val_)
  

#define b2Body_AngularDamping_get(self_) self_->GetAngularDamping()
#define b2Body_AngularDamping_set(self_, val_) self_->SetAngularDamping(val_)
  

#define b2Body_AngularVelocity_get(self_) self_->GetAngularVelocity()
#define b2Body_AngularVelocity_set(self_, val_) self_->SetAngularVelocity(val_)
  

#define b2Body_GravityScale_get(self_) self_->GetGravityScale()
#define b2Body_GravityScale_set(self_, val_) self_->SetGravityScale(val_)
  

#define b2Body_IsBullet_get(self_) self_->IsBullet()
#define b2Body_IsBullet_set(self_, val_) self_->SetBullet(val_)
  

#define b2Body_IsSleepingAllowed_get(self_) self_->IsSleepingAllowed()
#define b2Body_IsSleepingAllowed_set(self_, val_) self_->SetSleepingAllowed(val_)
  

#define b2Body_IsAwake_get(self_) self_->IsAwake()
#define b2Body_IsAwake_set(self_, val_) self_->SetAwake(val_)
  

#define b2Body_IsActive_get(self_) self_->IsActive()
#define b2Body_IsActive_set(self_, val_) self_->SetActive(val_)
  

#define b2Body_IsFixedRotation_get(self_) self_->IsFixedRotation()
#define b2Body_IsFixedRotation_set(self_, val_) self_->SetFixedRotation(val_)
  

#define b2CircleShape_VertexCount_get(self_) self_->GetVertexCount()
  

#define b2Contact_Manifold_get(self_) self_->GetManifold()
  

#define b2Contact_Next_get(self_) self_->GetNext()
  

#define b2Contact_FixtureA_get(self_) self_->GetFixtureA()
  

#define b2Contact_FixtureB_get(self_) self_->GetFixtureB()
  

#define b2Contact_IsTouching_get(self_) self_->IsTouching()
  

#define b2Contact_IsEnabled_get(self_) self_->IsEnabled()
#define b2Contact_IsEnabled_set(self_, val_) self_->SetEnabled(val_)
  

#define b2Contact_ChildIndexA_get(self_) self_->GetChildIndexA()
  

#define b2Contact_ChildIndexB_get(self_) self_->GetChildIndexB()
  

#define b2Contact_Friction_get(self_) self_->GetFriction()
#define b2Contact_Friction_set(self_, val_) self_->SetFriction(val_)
  

#define b2Contact_Restitution_get(self_) self_->GetRestitution()
#define b2Contact_Restitution_set(self_, val_) self_->SetRestitution(val_)
  

#define b2Fixture_FilterData_get(self_) new b2Filter(self_->GetFilterData())
  

#define b2Fixture_FilterData_set(self_, val_) self_->SetFilterData(*val_)
    

#define b2Fixture_Next_get(self_) self_->GetNext()
  

#define b2Fixture_UserData_get(self_) self_->GetUserData()
#define b2Fixture_UserData_set(self_, val_) self_->SetUserData(val_)
  

#define b2Fixture_Type_get(self_) self_->GetType()
  

#define b2Fixture_Restitution_get(self_) self_->GetRestitution()
#define b2Fixture_Restitution_set(self_, val_) self_->SetRestitution(val_)
  

#define b2Fixture_Friction_get(self_) self_->GetFriction()
#define b2Fixture_Friction_set(self_, val_) self_->SetFriction(val_)
  

#define b2Fixture_Density_get(self_) self_->GetDensity()
#define b2Fixture_Density_set(self_, val_) self_->SetDensity(val_)
  

#define b2Fixture_IsSensor_get(self_) self_->IsSensor()
#define b2Fixture_IsSensor_set(self_, val_) self_->SetSensor(val_)
  

#define b2Joint_Type_get(self_) self_->GetType()
  

#define b2Joint_BodyA_get(self_) self_->GetBodyA()
  

#define b2Joint_BodyB_get(self_) self_->GetBodyB()
  

#define b2Joint_AnchorA_get(self_) self_->GetAnchorA()
  

#define b2Joint_AnchorB_get(self_) self_->GetAnchorB()
  

#define b2Joint_Next_get(self_) self_->GetNext()
  

#define b2Joint_UserData_get(self_) self_->GetUserData()
#define b2Joint_UserData_set(self_, val_) self_->SetUserData(val_)
  

#define b2Joint_IsActive_get(self_) self_->IsActive()
  

#define b2Joint_CollideConnected_get(self_) self_->GetCollideConnected()
  

#define b2Shape_ChildCount_get(self_) self_->GetChildCount()
  

#define b2World_AllowSleeping_get(self_) self_->GetAllowSleeping()
#define b2World_AllowSleeping_set(self_, val_) self_->SetAllowSleeping(val_)
  

#define b2World_WarmStarting_get(self_) self_->GetWarmStarting()
#define b2World_WarmStarting_set(self_, val_) self_->SetWarmStarting(val_)
  

#define b2World_ContinuousPhysics_get(self_) self_->GetContinuousPhysics()
#define b2World_ContinuousPhysics_set(self_, val_) self_->SetContinuousPhysics(val_)
  

#define b2World_SubStepping_get(self_) self_->GetSubStepping()
#define b2World_SubStepping_set(self_, val_) self_->SetSubStepping(val_)
  

#define b2World_ProxyCount_get(self_) self_->GetProxyCount()
  

#define b2World_BodyCount_get(self_) self_->GetBodyCount()
  

#define b2World_JointCount_get(self_) self_->GetJointCount()
  

#define b2World_ContactCount_get(self_) self_->GetContactCount()
  

#define b2World_TreeHeight_get(self_) self_->GetTreeHeight()
  

#define b2World_TreeBalance_get(self_) self_->GetTreeBalance()
  

#define b2World_TreeQuality_get(self_) self_->GetTreeQuality()
  

#define b2World_Gravity_get(self_) self_->GetGravity()
#define b2World_Gravity_set(self_, val_) self_->SetGravity(val_)
  

#define b2World_IsLocked_get(self_) self_->IsLocked()
  

#define b2World_AutoClearForces_get(self_) self_->GetAutoClearForces()
#define b2World_AutoClearForces_set(self_, val_) self_->SetAutoClearForces(val_)
  
SWIGINTERN void b2ChainShape_CreateLoop(b2ChainShape *self,float vertices[],int numVertices){
        b2Vec2* verticesOut = new b2Vec2[numVertices];
        for( int i = 0; i < numVertices; i++ )
            verticesOut[i] = b2Vec2(vertices[i<<1], vertices[(i<<1)+1]);
        self->CreateLoop(verticesOut, numVertices);
        delete verticesOut;
    }
SWIGINTERN void b2ChainShape_CreateChain(b2ChainShape *self,float vertices[],int numVertices){
        b2Vec2* verticesOut = new b2Vec2[numVertices];
        for( int i = 0; i < numVertices; i++ )
            verticesOut[i] = b2Vec2(vertices[i<<1], vertices[(i<<1)+1]);
        self->CreateChain(verticesOut, numVertices);
        delete verticesOut;
    }
SWIGINTERN void b2ContactImpulse_CreateLoop(b2ContactImpulse *self,float vertices[],int numVertices){
        
    }
SWIGINTERN void b2ContactImpulse_CreateChain(b2ContactImpulse *self,float vertices[],int numVertices){
        
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Box2D_wrap.h"

SwigDirector_Shape::SwigDirector_Shape() : b2Shape(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Shape::~SwigDirector_Shape() {
  
}


b2Shape *SwigDirector_Shape::Clone(b2BlockAllocator *allocator) const {
  throw Swig::DirectorPureVirtualException("b2Shape::Clone");
}

int32 SwigDirector_Shape::GetChildCount() const {
  throw Swig::DirectorPureVirtualException("b2Shape::GetChildCount");
}

bool SwigDirector_Shape::TestPoint(b2Transform const &xf, b2Vec2 const &p) const {
  throw Swig::DirectorPureVirtualException("b2Shape::TestPoint");
}

bool SwigDirector_Shape::RayCast(b2RayCastOutput *output, b2RayCastInput const &input, b2Transform const &transform, int32 childIndex) const {
  throw Swig::DirectorPureVirtualException("b2Shape::RayCast");
}

void SwigDirector_Shape::ComputeAABB(b2AABB *aabb, b2Transform const &xf, int32 childIndex) const {
  throw Swig::DirectorPureVirtualException("b2Shape::ComputeAABB");
}

void SwigDirector_Shape::ComputeMass(b2MassData *massData, float32 density) const {
  throw Swig::DirectorPureVirtualException("b2Shape::ComputeMass");
}

void SwigDirector_Shape::swig_connect_director() {
  
}

void SwigDirector_Shape::swig_init_callbacks() {
  
}

SwigDirector_ContactListener::SwigDirector_ContactListener() : b2ContactListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ContactListener::~SwigDirector_ContactListener() {
  
}


void SwigDirector_ContactListener::BeginContact(b2Contact *contact) {
  void* jcontact = 0 ;
  
  if (!swig_callbackBeginContact) {
    b2ContactListener::BeginContact(contact);
    return;
  } else {
    jcontact = (void *) contact; 
    swig_callbackBeginContact(jcontact);
  }
}

void SwigDirector_ContactListener::EndContact(b2Contact *contact) {
  void* jcontact = 0 ;
  
  if (!swig_callbackEndContact) {
    b2ContactListener::EndContact(contact);
    return;
  } else {
    jcontact = (void *) contact; 
    swig_callbackEndContact(jcontact);
  }
}

void SwigDirector_ContactListener::PreSolve(b2Contact *contact, b2Manifold const *oldManifold) {
  void* jcontact = 0 ;
  void * joldManifold = 0 ;
  
  if (!swig_callbackPreSolve) {
    b2ContactListener::PreSolve(contact,oldManifold);
    return;
  } else {
    jcontact = (void *) contact; 
    joldManifold = (void *) oldManifold; 
    swig_callbackPreSolve(jcontact, joldManifold);
  }
}

void SwigDirector_ContactListener::PostSolve(b2Contact *contact, b2ContactImpulse const *impulse) {
  void* jcontact = 0 ;
  void * jimpulse = 0 ;
  
  if (!swig_callbackPostSolve) {
    b2ContactListener::PostSolve(contact,impulse);
    return;
  } else {
    jcontact = (void *) contact; 
    jimpulse = (void *) impulse; 
    swig_callbackPostSolve(jcontact, jimpulse);
  }
}

void SwigDirector_ContactListener::swig_connect_director(SWIG_Callback0_t callbackBeginContact, SWIG_Callback1_t callbackEndContact, SWIG_Callback2_t callbackPreSolve, SWIG_Callback3_t callbackPostSolve) {
  swig_callbackBeginContact = callbackBeginContact;
  swig_callbackEndContact = callbackEndContact;
  swig_callbackPreSolve = callbackPreSolve;
  swig_callbackPostSolve = callbackPostSolve;
}

void SwigDirector_ContactListener::swig_init_callbacks() {
  swig_callbackBeginContact = 0;
  swig_callbackEndContact = 0;
  swig_callbackPreSolve = 0;
  swig_callbackPostSolve = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void* SWIGSTDCALL CSharp_new_ContactArray(int jarg1) {
  void* jresult ;
  int arg1 ;
  b2Contact *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (b2Contact *)new_ContactArray(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ContactArray(void* jarg1) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  delete_ContactArray(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContactArray_getitem(void* jarg1, int jarg2) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  int arg2 ;
  SwigValueWrapper< b2Contact > result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = ContactArray_getitem(arg1,arg2);
  jresult = new b2Contact((const b2Contact &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactArray_setitem(void* jarg1, int jarg2, void * jarg3) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  int arg2 ;
  SwigValueWrapper< b2Contact > arg3 ;
  b2Contact *argp3 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  argp3 = (b2Contact *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null b2Contact", 0);
    return ;
  }
  arg3 = *argp3; 
  ContactArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_pi_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265359);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxManifoldPoints_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxPolygonVertices_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_aabbExtension_get() {
  double jresult ;
  double result;
  
  result = (double)(0.1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_aabbMultiplier_get() {
  double jresult ;
  double result;
  
  result = (double)(2.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_linearSlop_get() {
  double jresult ;
  double result;
  
  result = (double)(0.005);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_angularSlop_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0/180.0*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_polygonRadius_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0*0.005));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxSubSteps_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxTOIContacts_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_velocityThreshold_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxLinearCorrection_get() {
  double jresult ;
  double result;
  
  result = (double)(0.2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxAngularCorrection_get() {
  double jresult ;
  double result;
  
  result = (double)((8.0/180.0*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxTranslation_get() {
  double jresult ;
  double result;
  
  result = (double)(2.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxTranslationSquared_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0*2.0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxRotation_get() {
  double jresult ;
  double result;
  
  result = (double)((0.5*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_maxRotationSquared_get() {
  double jresult ;
  double result;
  
  result = (double)(((0.5*3.14159265359)*(0.5*3.14159265359)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_baumgarte_get() {
  double jresult ;
  double result;
  
  result = (double)(0.2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_toiBaugarte_get() {
  double jresult ;
  double result;
  
  result = (double)(0.75);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_timeToSleep_get() {
  double jresult ;
  double result;
  
  result = (double)(0.5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_linearSleepTolerance_get() {
  double jresult ;
  double result;
  
  result = (double)(0.01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_b2_angularSleepTolerance_get() {
  double jresult ;
  double result;
  
  result = (double)((2.0/180.0*3.14159265359));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_b2Alloc(int jarg1) {
  void* jresult ;
  int32 arg1 ;
  void *result = 0 ;
  
  arg1 = (int32)jarg1; 
  result = (void *)b2Alloc(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Free(void* jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; /* IntPtr */ 
  b2Free(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2Log(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  b2Log((char const *)arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2IsValid(float jarg1) {
  unsigned int jresult ;
  float32 arg1 ;
  bool result;
  
  arg1 = (float32)jarg1; 
  result = (bool)b2IsValid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2InvSqrt(float jarg1) {
  float jresult ;
  float32 arg1 ;
  float32 result;
  
  arg1 = (float32)jarg1; 
  result = (float32)b2InvSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transform__SWIG_0() {
  void * jresult ;
  b2Transform *result = 0 ;
  
  result = (b2Transform *)new b2Transform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Transform__SWIG_1(b2Vec2* jarg1, b2Rot* jarg2) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Rot *arg2 = 0 ;
  b2Transform *result = 0 ;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = (b2Transform *)new b2Transform((b2Vec2 const &)*arg1,(b2Rot const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transform_Position_set(void * jarg1, b2Vec2* jarg2) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->p = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Transform_Position_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->p);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Transform_Rotation_set(void * jarg1, b2Rot* jarg2) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Rot *arg2 = (b2Rot *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->q = *arg2;
}


SWIGEXPORT b2Rot* SWIGSTDCALL CSharp_Transform_Rotation_get(void * jarg1) {
  b2Rot* jresult ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  b2Rot *result = 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  result = (b2Rot *)& ((arg1)->q);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Transform(void * jarg1) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  
  arg1 = (b2Transform *)jarg1; 
  delete arg1;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_b2Vec2_zero_get() {
  b2Vec2* jresult ;
  b2Vec2 *result = 0 ;
  
  result = (b2Vec2 *)&b2Vec2_zero;
  jresult = result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Plus__SWIG_0(b2Vec2* jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = operator +((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Minus__SWIG_0(b2Vec2* jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = operator -((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Multiply__SWIG_0(float jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  float32 arg1 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (float32)jarg1; 
  arg2 = jarg2;
  result = operator *(arg1,(b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EqualEqual(b2Vec2* jarg1, b2Vec2* jarg2) {
  unsigned int jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  bool result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = (bool)operator ==((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2DistanceSquared(b2Vec2* jarg1, b2Vec2* jarg2) {
  float jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = (float32)b2DistanceSquared((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Multiply__SWIG_1(float jarg1, void * jarg2) {
  void * jresult ;
  float32 arg1 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 result;
  
  arg1 = (float32)jarg1; 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = operator *(arg1,(b2Vec3 const &)*arg2);
  jresult = new b2Vec3((const b2Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Plus__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec3 *arg1 = 0 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 result;
  
  arg1 = (b2Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = operator +((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  jresult = new b2Vec3((const b2Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Minus__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Vec3 *arg1 = 0 ;
  b2Vec3 *arg2 = 0 ;
  b2Vec3 result;
  
  arg1 = (b2Vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec3 const & type is null", 0);
    return 0;
  } 
  result = operator -((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  jresult = new b2Vec3((const b2Vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Plus__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  b2Mat22 *arg1 = 0 ;
  b2Mat22 *arg2 = 0 ;
  b2Mat22 result;
  
  arg1 = (b2Mat22 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  arg2 = (b2Mat22 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Mat22 const & type is null", 0);
    return 0;
  } 
  result = operator +((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2);
  jresult = new b2Mat22((const b2Mat22 &)result); 
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_b2Min(b2Vec2* jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = b2Min((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_b2Max(b2Vec2* jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  result = b2Max((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_b2Clamp(b2Vec2* jarg1, b2Vec2* jarg2, b2Vec2* jarg3) {
  b2Vec2 jresult ;
  b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Vec2 result;
  
  arg1 = jarg1;
  arg2 = jarg2;
  arg3 = jarg3;
  result = b2Clamp((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2NextPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint32 result;
  
  arg1 = (uint32)jarg1; 
  result = (uint32)b2NextPowerOfTwo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_b2IsPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  uint32 arg1 ;
  bool result;
  
  arg1 = (uint32)jarg1; 
  result = (bool)b2IsPowerOfTwo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_chunkSize_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_chunkSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxBlockSize_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_maxBlockSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_blockSizes_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_blockSizes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_chunkArrayIncrement_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_chunkArrayIncrement;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_b2_nullFeature_get() {
  unsigned char jresult ;
  uint8 result;
  
  result = (uint8)(uint8)b2_nullFeature;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manifold_points_set(void * jarg1, void * jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2ManifoldPoint *arg2 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2ManifoldPoint *)jarg2; 
  {
    size_t ii;
    b2ManifoldPoint *b = (b2ManifoldPoint *) arg1->points;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((b2ManifoldPoint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Manifold_points_get(void * jarg1) {
  void * jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2ManifoldPoint *result = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2ManifoldPoint *)(b2ManifoldPoint *) ((arg1)->points);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manifold_localNormal_set(void * jarg1, b2Vec2* jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->localNormal = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Manifold_localNormal_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localNormal);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manifold_localPoint_set(void * jarg1, b2Vec2* jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->localPoint = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Manifold_localPoint_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->localPoint);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manifold_type_set(void * jarg1, int jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Manifold::Type arg2 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2Manifold::Type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manifold_type_get(void * jarg1) {
  int jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2Manifold::Type result;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (b2Manifold::Type) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manifold_pointCount_set(void * jarg1, int jarg2) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->pointCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manifold_pointCount_get(void * jarg1) {
  int jresult ;
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  int32 result;
  
  arg1 = (b2Manifold *)jarg1; 
  result = (int32) ((arg1)->pointCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Manifold() {
  void * jresult ;
  b2Manifold *result = 0 ;
  
  result = (b2Manifold *)new b2Manifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Manifold(void * jarg1) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldManifold_Initialize(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, float jarg6) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Manifold *arg2 = (b2Manifold *) 0 ;
  b2Transform *arg3 = 0 ;
  float32 arg4 ;
  b2Transform *arg5 = 0 ;
  float32 arg6 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = (b2Manifold *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (float32)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg6 = (float32)jarg6; 
  (arg1)->Initialize((b2Manifold const *)arg2,(b2Transform const &)*arg3,arg4,(b2Transform const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldManifold_normal_set(void * jarg1, b2Vec2* jarg2) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_WorldManifold_normal_get(void * jarg1) {
  b2Vec2* jresult ;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->normal);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldManifold_points_set(void * jarg1, b2Vec2* jarg2) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = jarg2;
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->points;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_WorldManifold_points_get(void * jarg1) {
  b2Vec2* jresult ;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->points);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldManifold_separations_set(void * jarg1, void * jarg2) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  float32 *arg2 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  arg2 = (float32 *)jarg2; 
  {
    size_t ii;
    float32 *b = (float32 *) arg1->separations;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorldManifold_separations_get(void * jarg1) {
  void * jresult ;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  float32 *result = 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  result = (float32 *)(float32 *) ((arg1)->separations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorldManifold() {
  void * jresult ;
  b2WorldManifold *result = 0 ;
  
  result = (b2WorldManifold *)new b2WorldManifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WorldManifold(void * jarg1) {
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ;
  
  arg1 = (b2WorldManifold *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollideCircles(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2CircleShape *arg2 = (b2CircleShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2CircleShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2CircleShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollideCircles(arg1,(b2CircleShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollidePolygonAndCircle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2PolygonShape *arg2 = (b2PolygonShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2PolygonShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2CircleShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollidePolygonAndCircle(arg1,(b2PolygonShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollidePolygons(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2PolygonShape *arg2 = (b2PolygonShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2PolygonShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2PolygonShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollidePolygons(arg1,(b2PolygonShape const *)arg2,(b2Transform const &)*arg3,(b2PolygonShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollideEdgeAndCircle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2EdgeShape *arg2 = (b2EdgeShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2EdgeShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2CircleShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollideEdgeAndCircle(arg1,(b2EdgeShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2CollideEdgeAndPolygon(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  b2Manifold *arg1 = (b2Manifold *) 0 ;
  b2EdgeShape *arg2 = (b2EdgeShape *) 0 ;
  b2Transform *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ;
  b2Transform *arg5 = 0 ;
  
  arg1 = (b2Manifold *)jarg1; 
  arg2 = (b2EdgeShape *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2PolygonShape *)jarg4; 
  arg5 = (b2Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  b2CollideEdgeAndPolygon(arg1,(b2EdgeShape const *)arg2,(b2Transform const &)*arg3,(b2PolygonShape const *)arg4,(b2Transform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MassData_mass_set(void * jarg1, float jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MassData *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MassData_mass_get(void * jarg1) {
  float jresult ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 result;
  
  arg1 = (b2MassData *)jarg1; 
  result = (float32) ((arg1)->mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MassData_center_set(void * jarg1, b2Vec2* jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2MassData *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_MassData_center_get(void * jarg1) {
  b2Vec2* jresult ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2MassData *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->center);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MassData_I_set(void * jarg1, float jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2MassData *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->I = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MassData_I_get(void * jarg1) {
  float jresult ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 result;
  
  arg1 = (b2MassData *)jarg1; 
  result = (float32) ((arg1)->I);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MassData() {
  void * jresult ;
  b2MassData *result = 0 ;
  
  result = (b2MassData *)new b2MassData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MassData(void * jarg1) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  
  arg1 = (b2MassData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shape(void * jarg1) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  
  arg1 = (b2Shape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_Type_set(void * jarg1, int jarg2) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type arg2 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (b2Shape::Type)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_Type_get(void * jarg1) {
  int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (b2Shape::Type) ((arg1)->m_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_Radius_set(void * jarg1, float jarg2) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Shape *)jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Shape_Radius_get(void * jarg1) {
  float jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (float32) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_ChildCount_get(void * jarg1) {
  int jresult ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  int result;
  
  arg1 = (b2Shape *)jarg1; 
  result = (int)b2Shape_ChildCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shape() {
  void * jresult ;
  b2Shape *result = 0 ;
  
  result = (b2Shape *)new SwigDirector_Shape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_director_connect(void *objarg) {
  b2Shape *obj = (b2Shape *)objarg;
  SwigDirector_Shape *director = dynamic_cast<SwigDirector_Shape *>(obj);
  if (director) {
    director->swig_connect_director();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CircleShape() {
  void * jresult ;
  b2CircleShape *result = 0 ;
  
  result = (b2CircleShape *)new b2CircleShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CircleShape_GetSupport(void * jarg1, b2Vec2* jarg2) {
  int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  int32 result;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = jarg2;
  result = (int32)((b2CircleShape const *)arg1)->GetSupport((b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_CircleShape_GetSupportVertex(void * jarg1, b2Vec2* jarg2) {
  b2Vec2* jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = jarg2;
  result = (b2Vec2 *) &((b2CircleShape const *)arg1)->GetSupportVertex((b2Vec2 const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CircleShape_Position_set(void * jarg1, b2Vec2* jarg2) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_p = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_CircleShape_Position_get(void * jarg1) {
  b2Vec2* jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_p);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CircleShape_VertexCount_get(void * jarg1) {
  int jresult ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  int result;
  
  arg1 = (b2CircleShape *)jarg1; 
  result = (int)b2CircleShape_VertexCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CircleShape(void * jarg1) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  
  arg1 = (b2CircleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EdgeShape() {
  void * jresult ;
  b2EdgeShape *result = 0 ;
  
  result = (b2EdgeShape *)new b2EdgeShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_Set(void * jarg1, b2Vec2* jarg2, b2Vec2* jarg3) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  (arg1)->Set((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_m_vertex1_set(void * jarg1, b2Vec2* jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_vertex1 = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_EdgeShape_m_vertex1_get(void * jarg1) {
  b2Vec2* jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_m_vertex2_set(void * jarg1, b2Vec2* jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_vertex2 = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_EdgeShape_m_vertex2_get(void * jarg1) {
  b2Vec2* jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_m_vertex0_set(void * jarg1, b2Vec2* jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_vertex0 = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_EdgeShape_m_vertex0_get(void * jarg1) {
  b2Vec2* jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex0);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_m_vertex3_set(void * jarg1, b2Vec2* jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_vertex3 = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_EdgeShape_m_vertex3_get(void * jarg1) {
  b2Vec2* jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_vertex3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_m_hasVertex0_set(void * jarg1, unsigned int jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasVertex0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EdgeShape_m_hasVertex0_get(void * jarg1) {
  unsigned int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (bool) ((arg1)->m_hasVertex0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EdgeShape_m_hasVertex3_set(void * jarg1, unsigned int jarg2) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasVertex3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EdgeShape_m_hasVertex3_get(void * jarg1) {
  unsigned int jresult ;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  bool result;
  
  arg1 = (b2EdgeShape *)jarg1; 
  result = (bool) ((arg1)->m_hasVertex3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EdgeShape(void * jarg1) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  
  arg1 = (b2EdgeShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChainShape() {
  void * jresult ;
  b2ChainShape *result = 0 ;
  
  result = (b2ChainShape *)new b2ChainShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChainShape(void * jarg1) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_SetPrevVertex(void * jarg1, b2Vec2* jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2;
  (arg1)->SetPrevVertex((b2Vec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_SetNextVertex(void * jarg1, b2Vec2* jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2;
  (arg1)->SetNextVertex((b2Vec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_GetChildEdge(void * jarg1, void * jarg2, int jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2EdgeShape *arg2 = (b2EdgeShape *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (b2EdgeShape *)jarg2; 
  arg3 = (int32)jarg3; 
  ((b2ChainShape const *)arg1)->GetChildEdge(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_Count_set(void * jarg1, int jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->m_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChainShape_Count_get(void * jarg1) {
  int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  int32 result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (int32) ((arg1)->m_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_PrevVertex_set(void * jarg1, b2Vec2* jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_prevVertex = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_ChainShape_PrevVertex_get(void * jarg1) {
  b2Vec2* jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_prevVertex);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_NextVertex_set(void * jarg1, b2Vec2* jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_nextVertex = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_ChainShape_NextVertex_get(void * jarg1) {
  b2Vec2* jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_nextVertex);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_HasPrevVertex_set(void * jarg1, unsigned int jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasPrevVertex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChainShape_HasPrevVertex_get(void * jarg1) {
  unsigned int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (bool) ((arg1)->m_hasPrevVertex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_HasNextVertex_set(void * jarg1, unsigned int jarg2) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool arg2 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasNextVertex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChainShape_HasNextVertex_get(void * jarg1) {
  unsigned int jresult ;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  bool result;
  
  arg1 = (b2ChainShape *)jarg1; 
  result = (bool) ((arg1)->m_hasNextVertex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_NativeCreateLoop(void * jarg1, float* jarg2, int jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  float *arg2 ;
  int arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  b2ChainShape_CreateLoop(arg1,arg2,arg3);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChainShape_NativeCreateChain(void * jarg1, float* jarg2, int jarg3) {
  b2ChainShape *arg1 = (b2ChainShape *) 0 ;
  float *arg2 ;
  int arg3 ;
  
  arg1 = (b2ChainShape *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  b2ChainShape_CreateChain(arg1,arg2,arg3);
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonShape() {
  void * jresult ;
  b2PolygonShape *result = 0 ;
  
  result = (b2PolygonShape *)new b2PolygonShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_Set(void * jarg1, b2Vec2* jarg2, int jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = jarg2;
  arg3 = (int32)jarg3; 
  (arg1)->Set((b2Vec2 const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_SetAsBox__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetAsBox(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_SetAsBox__SWIG_1(void * jarg1, float jarg2, float jarg3, b2Vec2* jarg4, float jarg5) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  b2Vec2 *arg4 = 0 ;
  float32 arg5 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = jarg4;
  arg5 = (float32)jarg5; 
  (arg1)->SetAsBox(arg2,arg3,(b2Vec2 const &)*arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolygonShape_GetVertexCount(void * jarg1) {
  int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (int32)((b2PolygonShape const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_PolygonShape_GetVertex(void * jarg1, int jarg2) {
  b2Vec2* jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 arg2 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (b2Vec2 *) &((b2PolygonShape const *)arg1)->GetVertex(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonShape_Validate(void * jarg1) {
  unsigned int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  bool result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (bool)((b2PolygonShape const *)arg1)->Validate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_m_centroid_set(void * jarg1, b2Vec2* jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = jarg2;
  if (arg1) (arg1)->m_centroid = *arg2;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_PolygonShape_m_centroid_get(void * jarg1) {
  b2Vec2* jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (b2Vec2 *)& ((arg1)->m_centroid);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_m_vertices_set(void * jarg1, b2Vec2* jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = jarg2;
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->m_vertices;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_PolygonShape_m_vertices_get(void * jarg1) {
  b2Vec2* jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->m_vertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_m_normals_set(void * jarg1, b2Vec2* jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *arg2 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = jarg2;
  {
    size_t ii;
    b2Vec2 *b = (b2Vec2 *) arg1->m_normals;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((b2Vec2 *) arg2 + ii);
  }
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_PolygonShape_m_normals_get(void * jarg1) {
  b2Vec2* jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (b2Vec2 *)(b2Vec2 *) ((arg1)->m_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonShape_m_count_set(void * jarg1, int jarg2) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->m_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolygonShape_m_count_get(void * jarg1) {
  int jresult ;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  int32 result;
  
  arg1 = (b2PolygonShape *)jarg1; 
  result = (int32) ((arg1)->m_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolygonShape(void * jarg1) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  
  arg1 = (b2PolygonShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_nullNode_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_CreateFixture__SWIG_0(void * jarg1, b2FixtureDef* jarg2) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2FixtureDef *arg2 = (b2FixtureDef *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = (b2Fixture *)(arg1)->CreateFixture((b2FixtureDef const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_CreateFixture__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  float32 arg3 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Shape *)jarg2; 
  arg3 = (float32)jarg3; 
  result = (b2Fixture *)(arg1)->CreateFixture((b2Shape const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_DestroyFixture(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  (arg1)->DestroyFixture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_SetTransform(void * jarg1, b2Vec2* jarg2, float jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  arg3 = (float32)jarg3; 
  (arg1)->SetTransform((b2Vec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_ApplyForce(void * jarg1, b2Vec2* jarg2, b2Vec2* jarg3, unsigned int jarg4) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = jarg4 ? true : false; 
  (arg1)->ApplyForce((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_ApplyForceToCenter(void * jarg1, b2Vec2* jarg2, unsigned int jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3 ? true : false; 
  (arg1)->ApplyForceToCenter((b2Vec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_ApplyTorque(void * jarg1, float jarg2, unsigned int jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  bool arg3 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ApplyTorque(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_ApplyLinearImpulse(void * jarg1, b2Vec2* jarg2, b2Vec2* jarg3, unsigned int jarg4) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = jarg4 ? true : false; 
  (arg1)->ApplyLinearImpulse((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_ApplyAngularImpulse(void * jarg1, float jarg2, unsigned int jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  bool arg3 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ApplyAngularImpulse(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_GetMassData(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  ((b2Body const *)arg1)->GetMassData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_SetMassData(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  (arg1)->SetMassData((b2MassData const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_ResetMassData(void * jarg1) {
  b2Body *arg1 = (b2Body *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  (arg1)->ResetMassData();
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Body_GetWorldPoint(void * jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = ((b2Body const *)arg1)->GetWorldPoint((b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Body_GetWorldVector(void * jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = ((b2Body const *)arg1)->GetWorldVector((b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Body_GetLocalPoint(void * jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = ((b2Body const *)arg1)->GetLocalPoint((b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Body_GetLocalVector(void * jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = ((b2Body const *)arg1)->GetLocalVector((b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Body_GetLinearVelocityFromWorldPoint(void * jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = ((b2Body const *)arg1)->GetLinearVelocityFromWorldPoint((b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Body_GetLinearVelocityFromLocalPoint(void * jarg1, b2Vec2* jarg2) {
  b2Vec2 jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  result = ((b2Body const *)arg1)->GetLinearVelocityFromLocalPoint((b2Vec2 const &)*arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_Transform_set(void * jarg1, void * jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Transform *arg2 = (b2Transform *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2Transform *)jarg2; 
  b2Body_Transform_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_Transform_get(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Transform *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Transform *)b2Body_Transform_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_Position_set(void * jarg1, b2Vec2* jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  b2Body_Position_set(arg1,arg2);
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Body_Position_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *)b2Body_Position_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_WorldCenter_set(void * jarg1, b2Vec2* jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  b2Body_WorldCenter_set(arg1,arg2);
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Body_WorldCenter_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *)b2Body_WorldCenter_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_LocalCenter_set(void * jarg1, b2Vec2* jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  b2Body_LocalCenter_set(arg1,arg2);
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Body_LocalCenter_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *)b2Body_LocalCenter_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_LinearVelocity_set(void * jarg1, b2Vec2* jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2;
  b2Body_LinearVelocity_set(arg1,arg2);
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Body_LinearVelocity_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Vec2 *)b2Body_LinearVelocity_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_Next_get(void * jarg1) {
  void * jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2Body *)b2Body_Next_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_Type_set(void * jarg1, int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (b2BodyType)jarg2; 
  b2Body_Type_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Body_Type_get(void * jarg1) {
  int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType result;
  
  arg1 = (b2Body *)jarg1; 
  result = (b2BodyType)b2Body_Type_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_UserData_set(void * jarg1, void* jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (void *)jarg2; /* IntPtr */ 
  b2Body_UserData_set(arg1,arg2);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_Body_UserData_get(void * jarg1) {
  void* jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2Body *)jarg1; 
  result = (void *)b2Body_UserData_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_Angle_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_Angle_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_Mass_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_Mass_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_Inertia_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_Inertia_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_LinearDamping_set(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float)jarg2; 
  b2Body_LinearDamping_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_LinearDamping_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_LinearDamping_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_AngularDamping_set(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float)jarg2; 
  b2Body_AngularDamping_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_AngularDamping_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_AngularDamping_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_AngularVelocity_set(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float)jarg2; 
  b2Body_AngularVelocity_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_AngularVelocity_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_AngularVelocity_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_GravityScale_set(void * jarg1, float jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = (float)jarg2; 
  b2Body_GravityScale_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_GravityScale_get(void * jarg1) {
  float jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  float result;
  
  arg1 = (b2Body *)jarg1; 
  result = (float)b2Body_GravityScale_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_IsBullet_set(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2Body_IsBullet_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Body_IsBullet_get(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)b2Body_IsBullet_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_IsSleepingAllowed_set(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2Body_IsSleepingAllowed_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Body_IsSleepingAllowed_get(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)b2Body_IsSleepingAllowed_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_IsAwake_set(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2Body_IsAwake_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Body_IsAwake_get(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)b2Body_IsAwake_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_IsActive_set(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2Body_IsActive_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Body_IsActive_get(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)b2Body_IsActive_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_IsFixedRotation_set(void * jarg1, unsigned int jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Body *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2Body_IsFixedRotation_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Body_IsFixedRotation_get(void * jarg1) {
  unsigned int jresult ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  arg1 = (b2Body *)jarg1; 
  result = (bool)b2Body_IsFixedRotation_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Filter() {
  void * jresult ;
  b2Filter *result = 0 ;
  
  result = (b2Filter *)new b2Filter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Filter_categoryBits_set(void * jarg1, unsigned short jarg2) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 arg2 ;
  
  arg1 = (b2Filter *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->categoryBits = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Filter_categoryBits_get(void * jarg1) {
  unsigned short jresult ;
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 result;
  
  arg1 = (b2Filter *)jarg1; 
  result = (uint16) ((arg1)->categoryBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Filter_maskBits_set(void * jarg1, unsigned short jarg2) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 arg2 ;
  
  arg1 = (b2Filter *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->maskBits = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Filter_maskBits_get(void * jarg1) {
  unsigned short jresult ;
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 result;
  
  arg1 = (b2Filter *)jarg1; 
  result = (uint16) ((arg1)->maskBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Filter_groupIndex_set(void * jarg1, short jarg2) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  int16 arg2 ;
  
  arg1 = (b2Filter *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->groupIndex = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Filter_groupIndex_get(void * jarg1) {
  short jresult ;
  b2Filter *arg1 = (b2Filter *) 0 ;
  int16 result;
  
  arg1 = (b2Filter *)jarg1; 
  result = (int16) ((arg1)->groupIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Filter(void * jarg1) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  
  arg1 = (b2Filter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fixture_NativeGetShape__SWIG_0(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Shape *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Shape *)(arg1)->GetShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_Refilter(void * jarg1) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  (arg1)->Refilter();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Fixture_TestPoint(void * jarg1, b2Vec2* jarg2) {
  unsigned int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Vec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = jarg2;
  result = (bool)((b2Fixture const *)arg1)->TestPoint((b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_GetMassData(void * jarg1, void * jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (b2MassData *)jarg2; 
  ((b2Fixture const *)arg1)->GetMassData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_FilterData_set(void * jarg1, void * jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Filter *arg2 = (b2Filter *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (b2Filter *)jarg2; 
  b2Fixture_FilterData_set(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fixture_FilterData_get(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Filter *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Filter *)b2Fixture_FilterData_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fixture_Next_get(void * jarg1) {
  void * jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Fixture *)b2Fixture_Next_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_UserData_set(void * jarg1, void* jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (void *)jarg2; /* IntPtr */ 
  b2Fixture_UserData_set(arg1,arg2);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_Fixture_UserData_get(void * jarg1) {
  void* jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (void *)b2Fixture_UserData_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Fixture_Type_get(void * jarg1) {
  int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Shape::Type result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (b2Shape::Type)b2Fixture_Type_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_Restitution_set(void * jarg1, float jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (float)jarg2; 
  b2Fixture_Restitution_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Fixture_Restitution_get(void * jarg1) {
  float jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (float)b2Fixture_Restitution_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_Friction_set(void * jarg1, float jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (float)jarg2; 
  b2Fixture_Friction_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Fixture_Friction_get(void * jarg1) {
  float jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (float)b2Fixture_Friction_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_Density_set(void * jarg1, float jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = (float)jarg2; 
  b2Fixture_Density_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Fixture_Density_get(void * jarg1) {
  float jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (float)b2Fixture_Density_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Fixture_IsSensor_set(void * jarg1, unsigned int jarg2) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Fixture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2Fixture_IsSensor_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Fixture_IsSensor_get(void * jarg1) {
  unsigned int jresult ;
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  bool result;
  
  arg1 = (b2Fixture *)jarg1; 
  result = (bool)b2Fixture_IsSensor_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Fixture(void * jarg1) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  
  arg1 = (b2Fixture *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_b2DestructionListener(void * jarg1) {
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ;
  
  arg1 = (b2DestructionListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DestructionListener_SayGoodbye__SWIG_0(void * jarg1, void * jarg2) {
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2DestructionListener *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  (arg1)->SayGoodbye(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_b2DestructionListener_SayGoodbye__SWIG_1(void * jarg1, void * jarg2) {
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  
  arg1 = (b2DestructionListener *)jarg1; 
  arg2 = (b2Fixture *)jarg2; 
  (arg1)->SayGoodbye(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactImpulse_normalImpulses_set(void * jarg1, void * jarg2) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *arg2 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = (float32 *)jarg2; 
  {
    size_t ii;
    float32 *b = (float32 *) arg1->normalImpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContactImpulse_normalImpulses_get(void * jarg1) {
  void * jresult ;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *result = 0 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  result = (float32 *)(float32 *) ((arg1)->normalImpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactImpulse_tangentImpulses_set(void * jarg1, void * jarg2) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *arg2 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = (float32 *)jarg2; 
  {
    size_t ii;
    float32 *b = (float32 *) arg1->tangentImpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContactImpulse_tangentImpulses_get(void * jarg1) {
  void * jresult ;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float32 *result = 0 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  result = (float32 *)(float32 *) ((arg1)->tangentImpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactImpulse_count_set(void * jarg1, int jarg2) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  int32 arg2 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ContactImpulse_count_get(void * jarg1) {
  int jresult ;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  int32 result;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  result = (int32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactImpulse_CreateLoop(void * jarg1, float* jarg2, int jarg3) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float *arg2 ;
  int arg3 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  b2ContactImpulse_CreateLoop(arg1,arg2,arg3);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactImpulse_CreateChain(void * jarg1, float* jarg2, int jarg3) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  float *arg2 ;
  int arg3 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  b2ContactImpulse_CreateChain(arg1,arg2,arg3);
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ContactImpulse() {
  void * jresult ;
  b2ContactImpulse *result = 0 ;
  
  result = (b2ContactImpulse *)new b2ContactImpulse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ContactImpulse(void * jarg1) {
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ;
  
  arg1 = (b2ContactImpulse *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ContactListener(void * jarg1) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_BeginContact(void * jarg1, void* jarg2) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  (arg1)->BeginContact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_BeginContactSwigExplicitContactListener(void * jarg1, void* jarg2) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  (arg1)->b2ContactListener::BeginContact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_EndContact(void * jarg1, void* jarg2) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  (arg1)->EndContact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_EndContactSwigExplicitContactListener(void * jarg1, void* jarg2) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  (arg1)->b2ContactListener::EndContact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_PreSolve(void * jarg1, void* jarg2, void * jarg3) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  b2Manifold *arg3 = (b2Manifold *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  arg3 = (b2Manifold *)jarg3; 
  (arg1)->PreSolve(arg2,(b2Manifold const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_PreSolveSwigExplicitContactListener(void * jarg1, void* jarg2, void * jarg3) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  b2Manifold *arg3 = (b2Manifold *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  arg3 = (b2Manifold *)jarg3; 
  (arg1)->b2ContactListener::PreSolve(arg2,(b2Manifold const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_PostSolve(void * jarg1, void* jarg2, void * jarg3) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  b2ContactImpulse *arg3 = (b2ContactImpulse *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  arg3 = (b2ContactImpulse *)jarg3; 
  (arg1)->PostSolve(arg2,(b2ContactImpulse const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_PostSolveSwigExplicitContactListener(void * jarg1, void* jarg2, void * jarg3) {
  b2ContactListener *arg1 = (b2ContactListener *) 0 ;
  b2Contact *arg2 = (b2Contact *) 0 ;
  b2ContactImpulse *arg3 = (b2ContactImpulse *) 0 ;
  
  arg1 = (b2ContactListener *)jarg1; 
  arg2 = (b2Contact *)jarg2; /* IntPtr */ 
  arg3 = (b2ContactImpulse *)jarg3; 
  (arg1)->b2ContactListener::PostSolve(arg2,(b2ContactImpulse const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ContactListener() {
  void * jresult ;
  b2ContactListener *result = 0 ;
  
  result = (b2ContactListener *)new SwigDirector_ContactListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactListener_director_connect(void *objarg, SwigDirector_ContactListener::SWIG_Callback0_t callback0, SwigDirector_ContactListener::SWIG_Callback1_t callback1, SwigDirector_ContactListener::SWIG_Callback2_t callback2, SwigDirector_ContactListener::SWIG_Callback3_t callback3) {
  b2ContactListener *obj = (b2ContactListener *)objarg;
  SwigDirector_ContactListener *director = dynamic_cast<SwigDirector_ContactListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_stackSize_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_stackSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_b2_maxStackEntries_get() {
  int jresult ;
  int32 result;
  
  result = (int32)(int32)b2_maxStackEntries;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World(b2Vec2* jarg1) {
  void * jresult ;
  b2Vec2 *arg1 = 0 ;
  b2World *result = 0 ;
  
  arg1 = jarg1;
  result = (b2World *)new b2World((b2Vec2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_World(void * jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_SetDestructionListener(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2DestructionListener *arg2 = (b2DestructionListener *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2DestructionListener *)jarg2; 
  (arg1)->SetDestructionListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_SetContactFilter(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2ContactFilter *arg2 = (b2ContactFilter *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2ContactFilter *)jarg2; 
  (arg1)->SetContactFilter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_SetContactListener(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2ContactListener *arg2 = (b2ContactListener *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2ContactListener *)jarg2; 
  (arg1)->SetContactListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_SetDebugDraw(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Draw *arg2 = (b2Draw *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Draw *)jarg2; 
  (arg1)->SetDebugDraw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_CreateBody(void * jarg1, b2BodyDef* jarg2) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2BodyDef *arg2 = (b2BodyDef *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2;
  result = (b2Body *)(arg1)->CreateBody((b2BodyDef const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_DestroyBody(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Body *)jarg2; 
  (arg1)->DestroyBody(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_CreateJoint(void * jarg1, b2JointDef* jarg2) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2JointDef *arg2 = (b2JointDef *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2;
  result = (b2Joint *)(arg1)->CreateJoint((b2JointDef const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_DestroyJoint(void * jarg1, void * jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2Joint *)jarg2; 
  (arg1)->DestroyJoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_Step(void * jarg1, float jarg2, int jarg3, int jarg4) {
  b2World *arg1 = (b2World *) 0 ;
  float32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->Step(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_ClearForces(void * jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  (arg1)->ClearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_QueryAABB(void * jarg1, void * jarg2, void * jarg3) {
  b2World *arg1 = (b2World *) 0 ;
  b2QueryCallback *arg2 = (b2QueryCallback *) 0 ;
  b2AABB *arg3 = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2QueryCallback *)jarg2; 
  arg3 = (b2AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2AABB const & type is null", 0);
    return ;
  } 
  ((b2World const *)arg1)->QueryAABB(arg2,(b2AABB const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_RayCast(void * jarg1, void * jarg2, b2Vec2* jarg3, b2Vec2* jarg4) {
  b2World *arg1 = (b2World *) 0 ;
  b2RayCastCallback *arg2 = (b2RayCastCallback *) 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Vec2 *arg4 = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = (b2RayCastCallback *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  ((b2World const *)arg1)->RayCast(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_GetBodyList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Body *)(arg1)->GetBodyList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_GetJointList__SWIG_0(void * jarg1) {
  void * jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Joint *)(arg1)->GetJointList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_World_GetContactList__SWIG_0(void * jarg1) {
  void* jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Contact *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Contact *)(arg1)->GetContactList();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_ShiftOrigin(void * jarg1, b2Vec2* jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2;
  (arg1)->ShiftOrigin((b2Vec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_AllowSleeping_set(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2World_AllowSleeping_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_AllowSleeping_get(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)b2World_AllowSleeping_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_WarmStarting_set(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2World_WarmStarting_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_WarmStarting_get(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)b2World_WarmStarting_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_ContinuousPhysics_set(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2World_ContinuousPhysics_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_ContinuousPhysics_get(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)b2World_ContinuousPhysics_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_SubStepping_set(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2World_SubStepping_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_SubStepping_get(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)b2World_SubStepping_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_World_ProxyCount_get(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int result;
  
  arg1 = (b2World *)jarg1; 
  result = (int)b2World_ProxyCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_World_BodyCount_get(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int result;
  
  arg1 = (b2World *)jarg1; 
  result = (int)b2World_BodyCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_World_JointCount_get(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int result;
  
  arg1 = (b2World *)jarg1; 
  result = (int)b2World_JointCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_World_ContactCount_get(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int result;
  
  arg1 = (b2World *)jarg1; 
  result = (int)b2World_ContactCount_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_World_TreeHeight_get(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int result;
  
  arg1 = (b2World *)jarg1; 
  result = (int)b2World_TreeHeight_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_World_TreeBalance_get(void * jarg1) {
  int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  int result;
  
  arg1 = (b2World *)jarg1; 
  result = (int)b2World_TreeBalance_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_World_TreeQuality_get(void * jarg1) {
  float jresult ;
  b2World *arg1 = (b2World *) 0 ;
  float result;
  
  arg1 = (b2World *)jarg1; 
  result = (float)b2World_TreeQuality_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_Gravity_set(void * jarg1, b2Vec2* jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2;
  b2World_Gravity_set(arg1,arg2);
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_World_Gravity_get(void * jarg1) {
  b2Vec2* jresult ;
  b2World *arg1 = (b2World *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2World *)jarg1; 
  result = (b2Vec2 *)b2World_Gravity_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_IsLocked_get(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)b2World_IsLocked_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_AutoClearForces_set(void * jarg1, unsigned int jarg2) {
  b2World *arg1 = (b2World *) 0 ;
  bool arg2 ;
  
  arg1 = (b2World *)jarg1; 
  arg2 = jarg2 ? true : false; 
  b2World_AutoClearForces_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_World_AutoClearForces_get(void * jarg1) {
  unsigned int jresult ;
  b2World *arg1 = (b2World *) 0 ;
  bool result;
  
  arg1 = (b2World *)jarg1; 
  result = (bool)b2World_AutoClearForces_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MixFriction(float jarg1, float jarg2) {
  float jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)b2MixFriction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2MixRestitution(float jarg1, float jarg2) {
  float jresult ;
  float32 arg1 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)b2MixRestitution(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_GetWorldManifold(void* jarg1, void * jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2WorldManifold *arg2 = (b2WorldManifold *) 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (b2WorldManifold *)jarg2; 
  ((b2Contact const *)arg1)->GetWorldManifold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_ResetFriction(void* jarg1) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  (arg1)->ResetFriction();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_ResetRestitution(void* jarg1) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  (arg1)->ResetRestitution();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_SetTangentSpeed(void* jarg1, float jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  float32 arg2 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (float32)jarg2; 
  (arg1)->SetTangentSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Contact_GetTangentSpeed(void* jarg1) {
  float jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  float32 result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (float32)((b2Contact const *)arg1)->GetTangentSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_Evaluate(void* jarg1, void * jarg2, void * jarg3, void * jarg4) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Manifold *arg2 = (b2Manifold *) 0 ;
  b2Transform *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (b2Manifold *)jarg2; 
  arg3 = (b2Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  arg4 = (b2Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Transform const & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(arg2,(b2Transform const &)*arg3,(b2Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_Manifold_get(void* jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Manifold *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (b2Manifold *)b2Contact_Manifold_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_Contact_Next_get(void* jarg1) {
  void* jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Contact *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (b2Contact *)b2Contact_Next_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_FixtureA_get(void* jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (b2Fixture *)b2Contact_FixtureA_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_FixtureB_get(void* jarg1) {
  void * jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  b2Fixture *result = 0 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (b2Fixture *)b2Contact_FixtureB_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contact_IsTouching_get(void* jarg1) {
  unsigned int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  bool result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (bool)b2Contact_IsTouching_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_IsEnabled_set(void* jarg1, unsigned int jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  bool arg2 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = jarg2 ? true : false; 
  b2Contact_IsEnabled_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contact_IsEnabled_get(void* jarg1) {
  unsigned int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  bool result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (bool)b2Contact_IsEnabled_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contact_ChildIndexA_get(void* jarg1) {
  int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  int result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (int)b2Contact_ChildIndexA_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contact_ChildIndexB_get(void* jarg1) {
  int jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  int result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (int)b2Contact_ChildIndexB_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_Friction_set(void* jarg1, float jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  float arg2 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (float)jarg2; 
  b2Contact_Friction_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Contact_Friction_get(void* jarg1) {
  float jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  float result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (float)b2Contact_Friction_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_Restitution_set(void* jarg1, float jarg2) {
  b2Contact *arg1 = (b2Contact *) 0 ;
  float arg2 ;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  arg2 = (float)jarg2; 
  b2Contact_Restitution_set(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Contact_Restitution_get(void* jarg1) {
  float jresult ;
  b2Contact *arg1 = (b2Contact *) 0 ;
  float result;
  
  arg1 = (b2Contact *)jarg1; /* IntPtr */ 
  result = (float)b2Contact_Restitution_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT b2Vec2 SWIGSTDCALL CSharp_Joint_GetReactionForce(void * jarg1, float jarg2) {
  b2Vec2 jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  float32 arg2 ;
  b2Vec2 result;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = ((b2Joint const *)arg1)->GetReactionForce(arg2);
  jresult = *(b2Vec2*)&result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Joint_GetReactionTorque(void * jarg1, float jarg2) {
  float jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  float32 arg2 ;
  float32 result;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = (float32)jarg2; 
  result = (float32)((b2Joint const *)arg1)->GetReactionTorque(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_ShiftOrigin(void * jarg1, b2Vec2* jarg2) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = jarg2;
  (arg1)->ShiftOrigin((b2Vec2 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Joint_Type_get(void * jarg1) {
  int jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2JointType result;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2JointType)b2Joint_Type_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_BodyA_get(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Body *)b2Joint_BodyA_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_BodyB_get(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Body *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Body *)b2Joint_BodyB_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Joint_AnchorA_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Vec2 *)b2Joint_AnchorA_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT b2Vec2* SWIGSTDCALL CSharp_Joint_AnchorB_get(void * jarg1) {
  b2Vec2* jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Vec2 *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Vec2 *)b2Joint_AnchorB_get(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_Next_get(void * jarg1) {
  void * jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Joint *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (b2Joint *)b2Joint_Next_get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_UserData_set(void * jarg1, void* jarg2) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  arg2 = (void *)jarg2; /* IntPtr */ 
  b2Joint_UserData_set(arg1,arg2);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_Joint_UserData_get(void * jarg1) {
  void* jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *result = 0 ;
  
  arg1 = (b2Joint *)jarg1; 
  result = (void *)b2Joint_UserData_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Joint_IsActive_get(void * jarg1) {
  unsigned int jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  bool result;
  
  arg1 = (b2Joint *)jarg1; 
  result = (bool)b2Joint_IsActive_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Joint_CollideConnected_get(void * jarg1) {
  unsigned int jresult ;
  b2Joint *arg1 = (b2Joint *) 0 ;
  bool result;
  
  arg1 = (b2Joint *)jarg1; 
  result = (bool)b2Joint_CollideConnected_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_b2_minPulleyLength_get() {
  float jresult ;
  float32 result;
  
  result = (float32)(float32)b2_minPulleyLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_CircleShape_SWIGUpcast(b2CircleShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_EdgeShape_SWIGUpcast(b2EdgeShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_ChainShape_SWIGUpcast(b2ChainShape *jarg1) {
    return (b2Shape *)jarg1;
}

SWIGEXPORT b2Shape * SWIGSTDCALL CSharp_PolygonShape_SWIGUpcast(b2PolygonShape *jarg1) {
    return (b2Shape *)jarg1;
}

#ifdef __cplusplus
}
#endif

